ПЛАН ЗАЩИТЫ ЛАБОРАТОРНОЙ: B-TREE

1. Введение
- Определение B-дерева: сбалансированная структура данных для хранения отсортированных ключей.
- Основное применение: базы данных, файловые системы, индексы.
- Отличие от бинарных деревьев: каждый узел может хранить много ключей, дерево имеет малую высоту.

2. Теоретическая часть
- Минимальная степень дерева t: каждый узел содержит от (t-1) до (2t-1) ключей.
- Инварианты:
  * все листья на одной глубине;
  * количество детей у узла = количество ключей + 1;
  * корень может иметь меньше ключей, но не более 2t-1;
  * порядок ключей в узле всегда отсортирован.
- Высота дерева: O(log_t N), где N — количество элементов.

3. Реализация в лабораторной
- Классы:
  * BTree — интерфейс (search, insert, size, height).
  * BTreeNode — описание узла (ключи, значения, список детей, флаг leaf).
  * BTreeImplementation — основная логика: поиск, вставка, splitChild, замена значений.
  * Benchmark классы — тестирование производительности через JMH.
- Алгоритмы:
  * Поиск: рекурсивный спуск с бинарным поиском внутри узла.
  * Вставка:
    - если ключ уже есть — заменяем значение;
    - если узел полон — splitChild, затем вставка в подходящего потомка;
    - вставка в лист — добавление ключа в отсортированное место.

4. Бенчмарки
- JMH-бенчмарки реализуют тесты:
  * Вставка с разными параметрами t и preload.
  * Поиск существующих и несуществующих элементов при n = 10k и n = 100k.
- Результаты:
  * вставка ~0.15 мкс;
  * поиск-hit растет логарифмически (132 нс → 205 нс при росте n в 10 раз);
  * поиск-miss быстрее поиска-hit (35–46 нс).

5. Практическое значение
- Демонстрация свойств B-деревьев: балансировка, логарифмическое время поиска и вставки.
- Подтверждение через JMH-бенчмарки.
- Реальная применимость в системах, где критично количество дисковых операций (DBMS, FS).

6. Возможные вопросы экзаменатора и ответы

БАЗОВЫЕ
1) Чем B-дерево отличается от бинарного дерева поиска?
   — В B-дереве каждый узел содержит несколько ключей, что уменьшает высоту и количество переходов.

2) Что такое минимальная степень t?
   — Это параметр, задающий минимальное и максимальное количество ключей в узле.

3) Как обеспечивается балансировка?
   — Через операцию splitChild: при переполнении узел расщепляется, медианный ключ поднимается вверх.

4) Какова асимптотическая сложность поиска?
   — O(log N), за счёт ограниченной высоты дерева.

5) Где применяются B-деревья?
   — Индексы в СУБД, файловые системы, структуры данных на диске.

СЛОЖНЫЕ
1) Почему split происходит до вставки, а не после?
   — Это гарантирует, что мы всегда спускаемся в неполный узел, упрощая алгоритм.

2) Чем отличается B-дерево от B+-дерева?
   — В B-дереве значения могут храниться в каждом узле, в B+ — только в листьях, а внутренние узлы содержат только ключи.

3) Почему поиск miss быстрее поиска hit в результатах?
   — При промахе алгоритм раньше завершает работу: меньше сравнений и переходов.

4) Как влияет параметр t на производительность?
   — Чем больше t, тем меньше высота дерева и число переходов, но дороже поиск внутри узла.

5) Что будет, если попытаться вставить ключ, который уже существует?
   — В реализации предусмотрена замена значения без увеличения размера дерева.

---

Таким образом, план защиты включает теорию, описание кода, интерпретацию результатов, практическую ценность и готовые ответы на вопросы.