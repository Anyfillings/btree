РЕЗУЛЬТАТЫ БЕНЧМАРКОВ B-TREE

1) ВСТАВКА (insertRandom)
- t = 3, preload = 10000 → 0,169 мкс/операция
- t = 8, preload = 10000 → 0,149 мкс/операция

Интерпретация:
Более высокий порядок дерева (t=8) даёт немного меньшую латентность вставки за счёт меньшей высоты дерева.
Разница небольшая, но подтверждает, что широкие узлы компенсируют дополнительные затраты на поиск внутри узла.


2) ПОИСК (searchHit)
- n = 10 000 → 132 нс/операция
- n = 100 000 → 205 нс/операция

Интерпретация:
При увеличении числа элементов в 10 раз время поиска увеличилось всего в 1.5 раза.
Это соответствует асимптотике O(log N).


3) ПОИСК (searchMiss)
- n = 10 000 → 35,6 нс/операция
- n = 100 000 → 46,6 нс/операция

Интерпретация:
Поиск промаха значительно быстрее (примерно в 4 раза), чем поиск существующего ключа.
Причина — алгоритм быстрее завершает проверку отсутствия ключа.
Рост при увеличении n есть, но слабее, чем у searchHit.


4) ОБЩИЕ ВЫВОДЫ
- Вставка работает очень быстро (~0.15 мкс) и слабо зависит от параметра t.
- Поиск-hit растет логарифмически, что подтверждает свойства B-деревьев.
- Поиск-miss быстрее поиска-hit, так как дерево раньше выявляет отсутствие ключа.
- Поиск (нс) значительно дешевле вставки (мкс).
